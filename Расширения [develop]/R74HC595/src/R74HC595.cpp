
#include "Arduino.h" ///Разрешаем доступ к стандартным функциям Arduino
#include "R74HC595.h" /// и к характеристикам в головном файле библиотеки


R74HC595Class::R74HC595Class(int latchPin, int clockPin, int dataPin)  /// конструктор для создания экземпляра создаваемого класса, задаем номера используемых портов ввода/вывода через параметры
{
	pinMode(latchPin,OUTPUT); ///Порт для "защелкивания" устанавливается в режим вывода
	pinMode(clockPin,OUTPUT); ///Порт синхронизации устанавливается в режим вывода
	pinMode(dataPin,OUTPUT); ///Порт передачи данных устанавливается в режим вывода
	
	_latchPin = latchPin; /// номер порта "защелки" сохраняется в частной переменной для использования в других функциях
	_clockPin = clockPin; /// номер порта синхронизации сохраняется в частной переменной для использования в других функциях
	_dataPin = dataPin; /// номер порта передачи данных сохраняется в частной переменной для использования в других функциях
}


void R74HC595Class::updateShiftRegister(byte leds) /// конструктор функции updateShiftRegister (функция вызывается с параметром, если этот параметр включить в конструкотр класса - то значение этого параметра установится при объявлении класса и далее не будет изменяться)
///Код R74HC595Class:: означает, что функция принадлежит классу R74HC595Class.
///Нижний пробел в начале имени переменной _pin — принятое обозначение для частных переменных.
{
	_leds = leds; /// присваиваем параметр переданный при вызове функции в частную переменную
	
	digitalWrite(_latchPin, LOW); ///устанавливаем "защелку" в LOW для того чтобы записать свой байт информации в регистр сдвига

	shiftOut(_dataPin, _clockPin, LSBFIRST, _leds); /// стандартная функция записи байта информации в регистр сдвига

	digitalWrite(_latchPin, HIGH); ///устанавливаем "защелку" в HIGH для блокировки записи в регистр сдвига

}